---
title: "ðŸ“š Python package documentation"
subtitle: "VIMuRe v0.1 (latest)"
---
Module `vimure.utils`

## Functions

`def apply_rho_threshold(model, threshold=None)`

Apply a threshold to binarise the rho matrix and return the recovered Y

`def calculate_AUC(pred, data0, mask=None)`

Return the AUC of the link prediction. It represents the probability that a randomly chosen missing connection
(true positive) is given a higher score by our method than a randomly chosen pair of unconnected vertices
(true negative).


## Parameters

**`pred`** :â€‚`ndarray`
Inferred values.
**`data0`** :â€‚`ndarray`
Given values.
**`mask`** :â€‚`ndarray`
Mask for selecting a subset of the adjacency tensor.

## Returns


AUC value.

`def calculate_average_over_reporter_mask(X, R)`

`def calculate_overall_reciprocity(Y)`

`def get_item_array_from_subs(A, ref_subs)`

Get values of ref_subs entries of a dense tensor.
Output is a 1-d array with dimension = number of non zero entries.

`def get_optimal_threshold(model)`

<https://arxiv.org/pdf/2112.11396.pdf> pg 8

`def is_sparse(X)`

Check whether the input tensor is sparse.
It implements a heuristic definition of sparsity. A tensor is considered sparse if:
given
M = number of modes
S = number of entries
I = number of non-zero entries
then
N > M(I + 1)


## Parameters

**`X`** :â€‚`ndarray`
Input data.

## Returns


Boolean flag: true if the input tensor is sparse, false otherwise.

`def match_arg(x, lst)`

`def preprocess(X)`

Pre-process input data tensor.
If the input is sparse, returns an int sptensor. Otherwise, returns an int dtensor.


## Parameters

**`X`** :â€‚`ndarray/list`
Input data.

## Returns

**`X`** :â€‚`sptensor/dtensor`
Pre-processed data. If the input is sparse, returns an int sptensor. Otherwise, returns an int dtensor.

`def sparse_max(A, B)`

Return the element-wise maximum of sparse matrices `A` and `B`.

`def sptensor_from_dense_array(X)`

Create an sptensor from a ndarray or dtensor.


## Parameters

**`X`** :â€‚`ndarray`
Input data.

## Returns


sptensor from a ndarray or dtensor.

`def sptensor_from_list(X)`

Create an sptensor a sptensor from a list.


Assuming it is a list of dimensions L x M with sparse matrices as elements

# Index

* ### Super-module


	+ [`vimure`](vimure.index.html)
* ### [Functions](#header-functions)


	+ [`apply_rho_threshold`](vimure.#vimure.utils.apply_rho_threshold)
	+ [`calculate_AUC`](vimure.#vimure.utils.calculate_AUC)
	+ [`calculate_average_over_reporter_mask`](vimure.#vimure.utils.calculate_average_over_reporter_mask)
	+ [`calculate_overall_reciprocity`](vimure.#vimure.utils.calculate_overall_reciprocity)
	+ [`get_item_array_from_subs`](vimure.#vimure.utils.get_item_array_from_subs)
	+ [`get_optimal_threshold`](vimure.#vimure.utils.get_optimal_threshold)
	+ [`is_sparse`](vimure.#vimure.utils.is_sparse)
	+ [`match_arg`](vimure.#vimure.utils.match_arg)
	+ [`preprocess`](vimure.#vimure.utils.preprocess)
	+ [`sparse_max`](vimure.#vimure.utils.sparse_max)
	+ [`sptensor_from_dense_array`](vimure.#vimure.utils.sptensor_from_dense_array)
	+ [`sptensor_from_list`](vimure.#vimure.utils.sptensor_from_list)

Generated by [pdoc 0.10.0](https://pdoc3.github.io/pdoc "pdoc: Python API documentation generator").

