---
title: "ðŸ“š Python package documentation"
subtitle: "VIMuRe v0.1 (latest)"
---
Module `vimure.model`

Inference model

## Functions

`def categorical_elbo_term(rho, prior_rho, EPS)`

`def gamma_elbo_term(pa, pb, qa, qb)`

## Classes

`class VimureModel
(undirected:Â boolÂ =Â False, mutuality:Â boolÂ =Â True, convergence_tol:Â floatÂ =Â 0.1, decision:Â intÂ =Â 1, verbose:Â boolÂ =Â False)`

**ViMuRe**


Fit a probabilistic generative model to double sampled networks. It returns reliability parameters for the
reporters (theta), average interactions for the links (lambda) and the estimate of the true and unknown
network (rho). The inference is performed with a Variational Inference approach.

Note:â€‚This closely follows the scikit-learn structure of classes:


<https://github.com/scikit-learn-contrib/project-template/blob/master/skltemplate/_template.py>

## Parameters

**`undirected`** :â€‚`boolean`
Whether the network is undirected.
**`mutuality`** :â€‚`boolean`
Whether to use the mutuality parameter.
**`convergence_tol`** :â€‚`float`
Controls when to stop the optimisation algorithm (CAVI)

### Ancestors


* sklearn.base.TransformerMixin
* sklearn.utils._set_output._SetOutputMixin
* sklearn.base.BaseEstimator


### Methods

`def calculate_mean_poisson(self, G_exp_theta=None, G_exp_lambda=None, G_exp_nu=None, rho=None, X_T=None, R=None)`

`def fit(self, X, theta_prior=(0.1, 0.1), lambda_prior=(10.0, 10.0), eta_prior=(0.5, 1.0), rho_prior=None, seed:Â intÂ =Â None, **extra_params)`

## Parameters

**`X`** :â€‚`ndarray`
Network adjacency tensor.
**`theta_prior`** :â€‚`2D tuple`
Shape and scale hyperparameters for variable theta
**`lambda_prior`** :â€‚`2D tuple`
Shape and scale hyperparameters for variable lambda
**`eta_prior`** :â€‚`2D tuple`
Shape and scale hyperparameters for variable eta
**`rho_prior`** :â€‚`None/ndarray`
Array with prior values of the rho parameter - if ndarray.

## Extra parameters (Advanced tuning of inference)


R: ndarray
a multidimensional array L x N x N x M indicating which reports to consider
K: None/int
Value of the maximum entry of the network - i
EPS : float
White noise. Default: 1e-12
bias0: float
Bias for rho_prior entry 0. Default: 0.2
max_iter: int
Maximum number of iteration steps before aborting. Default=500


## Returns

`self.rho_f, self.G_exp_theta_f, self.G_exp_lambda_f, self.G_exp_nu_f, self.maxL`
Â 

`def get_inferred_model(self, method='rho_max', threshold=None)`

Estimate Y


Use this function to reconstruct the Y matrix with a fitted vimure model.
It will use `model.rho_f` values to extract an estimated Y matrix.


* *rho_max*: Assign the value of the highest probability
* *rho_mean*: Expected value of the discrete distribution
* *fixed_threshold*: Check if the probability is higher than a threshold (Only for K=2)
* *heuristic_threshold*: Calculate and use the best threshold (Only for K=2)


## Parameters

**`model`** :â€‚`vm.model.VimureModel`
A `vm.model.VimureModel` object
**`method`** :â€‚`str`
A character string indicating which method is to be computed.
One of "rho_max" (default), "rho_mean", "fixed_threshold" or "heuristic_threshold".
**`threshold`** :â€‚`float`
A threshold to be used when method = "fixed_threshold".

## Returns

**`Y`** :â€‚`ndarray`
Â 

`def get_posterior_estimates(self)`

`def sample_inferred_model(self, N=1, seed=None)`

Sample Y trials from rho distribution


Use this function to sample Y trials with a fitted vimure model.
It will use `model.rho_f` as the probabilities of a discrete distribution.


## Parameters

**`model`** :â€‚`vm.model.VimureModel`
A `vm.model.VimureModel` object
**`N`** :â€‚`int`
Number of trials
**`seed`** :â€‚`int`
A pseudo generator seed

## Returns

**`Y`** :â€‚`List[ndarray]`
A list of trials

`def sp_uttkrp_lambda(self, vals, subs)`

Compute the Khatri-Rao product (sparse version).


## Parameters

**`vals`** :â€‚`ndarray`
Values of the non-zero entries.
**`subs`** :â€‚`tuple`
Indices of elements that are non-zero. It is a n-tuple of array-likes and the length of tuple n must
be equal to the dimension of tensor.

## Returns

**`out`** :â€‚`ndarray`
Matrix which is the result of the matrix product of the unfolding of the tensor and the Khatri-Rao
product of the membership matrix.

`def sp_uttkrp_rho(self, vals, subs)`

Compute the Khatri-Rao product (sparse version).


## Parameters

**`vals`** :â€‚`ndarray`
Values of the non-zero entries.
**`subs`** :â€‚`tuple`
Indices of elements that are non-zero. It is a n-tuple of array-likes and the length of tuple n must
be equal to the dimension of tensor.

## Returns

**`out`** :â€‚`ndarray`
Matrix which is the result of the matrix product of the unfolding of the tensor and the Khatri-Rao
product of the membership matrix.

`def sp_uttkrp_theta(self, vals, subs)`

Compute the Khatri-Rao product (sparse version).


## Parameters

**`vals`** :â€‚`ndarray`
Values of the non-zero entries.
**`subs`** :â€‚`tuple`
Indices of elements that are non-zero. It is a n-tuple of array-likes and the length of tuple n must
be equal to the dimension of tensor.

## Returns

**`out`** :â€‚`ndarray`
Matrix which is the result of the matrix product of the unfolding of the tensor and the Khatri-Rao
product of the membership matrix.

# Index

* ### Super-module


	+ [`vimure`](vimure.index.html)
* ### [Functions](#header-functions)


	+ [`categorical_elbo_term`](vimure.#vimure.model.categorical_elbo_term)
	+ [`gamma_elbo_term`](vimure.#vimure.model.gamma_elbo_term)
* ### [Classes](#header-classes)


	+ #### [`VimureModel`](vimure.#vimure.model.VimureModel)
	
	
		- [`calculate_mean_poisson`](vimure.#vimure.model.VimureModel.calculate_mean_poisson)
		- [`fit`](vimure.#vimure.model.VimureModel.fit)
		- [`get_inferred_model`](vimure.#vimure.model.VimureModel.get_inferred_model)
		- [`get_posterior_estimates`](vimure.#vimure.model.VimureModel.get_posterior_estimates)
		- [`sample_inferred_model`](vimure.#vimure.model.VimureModel.sample_inferred_model)
		- [`sp_uttkrp_lambda`](vimure.#vimure.model.VimureModel.sp_uttkrp_lambda)
		- [`sp_uttkrp_rho`](vimure.#vimure.model.VimureModel.sp_uttkrp_rho)
		- [`sp_uttkrp_theta`](vimure.#vimure.model.VimureModel.sp_uttkrp_theta)

Generated by [pdoc 0.10.0](https://pdoc3.github.io/pdoc "pdoc: Python API documentation generator").

