---
title: "ðŸ“š Python package documentation"
subtitle: "VIMuRe v0.1 (latest)"
---
Module `vimure.io`

Read and parse data

## Global variables

`var DEFAULT_SEED`

SETUP

## Functions

`def parse_graph_from_networkx(G, **kwargs)`

`def read_from_csv(filename:Â str, **kwargs) â€‘>Â [RealNetwork](#vimure.io.RealNetwork "vimure.io.RealNetwork")`

Reads a csv file and returns a RealNetwork object


## Parameters

**`filename`** :â€‚`str`
Path to the csv file

**kwargs:
Any other parameters to be sent to read_from_edgelist


## Returns

[`RealNetwork`](vimure.#vimure.io.RealNetwork)
A RealNetwork object

`def read_from_edgelist(df:Â pandas.core.frame.DataFrame, nodes:Â listÂ =Â [], reporters:Â listÂ =Â [], is_weighted:Â boolÂ =Â False, is_undirected:Â boolÂ =Â False, reporter:Â strÂ =Â 'reporter', layer:Â strÂ =Â 'layer', ego:Â strÂ =Â 'ego', alter:Â strÂ =Â 'alter', weight:Â strÂ =Â 'weight', K=None, R=None, **kwargs) â€‘>Â [RealNetwork](#vimure.io.RealNetwork "vimure.io.RealNetwork")`

## Parameters

```
df: pd.DataFrame
    DataFrame representing the edgelist
nodes: list
    list of all nodes
reporters: list
    list of the nodes who took the survey
is_weighted: bool
    True if we should add weights to adjacency matrices
reporter: str
    reporter column
layer: str
    layer column
ego: str
    ego column
alter: str
    alter column
weight: str
    weight column
K: int
    maximum value on the adjacency matrix
R: list of list of sparse COO array NxN, tot dimension is MxLxNxN (same dimension of the data)
    If this is None, we assume reporters only reports their own ties (of any type)
**kwargs:
    any other parameters to be sent to RealNetwork.__init__

```

## Returns

```
A RealNetwork object that is used to represent the observed network

```

`def read_from_igraph(G, **kwargs)`

Reads an igraph object and returns a RealNetwork object


## Parameters

**`G`** :â€‚`igraph.Graph`
An igraph object

**kwargs:
Any other parameters to be sent to read_from_edgelist


## Returns

[`RealNetwork`](vimure.#vimure.io.RealNetwork)
A RealNetwork object

## Classes

`class BaseNetwork
(N:Â int, M:Â int, L:Â int, K:Â int, seed:Â intÂ =Â 10, **kwargs)`

A base abstract class for generation and management of networks, in an adequate format for this project.
Suitable for representing any type of network, synthetic or real.


## Parameters

**`N`** :â€‚`int`
Number of nodes.
**`M`** :â€‚`int`
Number of reporters.
**`L`** :â€‚`int`
Number of layers.
**`K`** :â€‚`int`
Maximum edge weight in the adjacency matrix.
When `K=2`, the adjacency matrix will contain some `Y_{ij}=0` and `Y_{ij}=1`.
**`seed`** :â€‚`int`
Pseudo random generator seed to use.

### Subclasses


* [RealNetwork](#vimure.io.RealNetwork "vimure.io.RealNetwork")
* [BaseSyntheticNetwork](synthetic.html#vimure.synthetic.BaseSyntheticNetwork "vimure.synthetic.BaseSyntheticNetwork")


### Methods

`def getX(self)`

`def get_layer(self, layer:Â int, return_matrix:Â boolÂ =Â True)`

Return adjacency matrix or nx.Digraph object relative to the requested layer of the observed graph (X)

`def setX(self, X)`

`class RealNetwork
(X, R=None, **kwargs)`

Class to represent all elements of a real network, and distinguish
it from synthetic networks (vimure.synthetic module).


Note: this class is not meant to be used directly by users.


## Parameters

**`X`** :â€‚`tensor` of `dimensions L x N x N x M`
Represents the observed network as reported by each reporter M
**`R`** :â€‚`list` of `list` of `sparse COO array NxN, tot dimension is L x N x N x M (same dimension` of `the data)`
If this is None, we assume reporters only reports their own ties (of any type)

### Ancestors


* [BaseNetwork](#vimure.io.BaseNetwork "vimure.io.BaseNetwork")


### Inherited members


* `**[BaseNetwork](#vimure.io.BaseNetwork "vimure.io.BaseNetwork")**`:
	+ [`get_layer`](vimure.#vimure.io.BaseNetwork.get_layer)

# Index

* ### Super-module


	+ [`vimure`](vimure.index.html)
* ### [Global variables](#header-variables)


	+ [`DEFAULT_SEED`](vimure.#vimure.io.DEFAULT_SEED)
* ### [Functions](#header-functions)


	+ [`parse_graph_from_networkx`](vimure.#vimure.io.parse_graph_from_networkx)
	+ [`read_from_csv`](vimure.#vimure.io.read_from_csv)
	+ [`read_from_edgelist`](vimure.#vimure.io.read_from_edgelist)
	+ [`read_from_igraph`](vimure.#vimure.io.read_from_igraph)
* ### [Classes](#header-classes)


	+ #### [`BaseNetwork`](vimure.#vimure.io.BaseNetwork)
	
	
		- [`getX`](vimure.#vimure.io.BaseNetwork.getX)
		- [`get_layer`](vimure.#vimure.io.BaseNetwork.get_layer)
		- [`setX`](vimure.#vimure.io.BaseNetwork.setX)
	+ #### [`RealNetwork`](vimure.#vimure.io.RealNetwork)

Generated by [pdoc 0.10.0](https://pdoc3.github.io/pdoc "pdoc: Python API documentation generator").

