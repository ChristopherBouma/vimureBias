---
title: "üíª **Tutorial 02**: Introduction to VIMuRe in R"
subtitle: "VIMuRe v0.1.0 (latest)."
categories: [basics, R]
tags: 
  - basics
  - tutorial
  - R
description: "If you have an edge list, or a set of igraph objects, VIMuRe can help you model the latent network structure."
---

::: callout-note

 If you use `VIMuRe` in your research, please cite [@de_bacco_latent_2023].

:::

TLDR: By the end of this tutorial, you will be able to:

- Load data into `VIMuRe`
- Fit a model to your data
- Obtain estimates of the latent network structure

Found an interesting use case for `VIMuRe`? Let us know! Open a [discussion](https://github.com/latentnetworks/vimure/discussions) on our GitHub repository.

# ‚öôÔ∏è Setup

**Import packages**

```r
library(tidyr)
library(dplyr)
library(ggplot2)

library(igraph)
library(vimure)
```

‚ö†Ô∏è Ensure you have installed the latest version of `VIMuRe` before running this tutorial. Follow the üì¶ [Installation instructions](/latest/install.qmd) if you haven't already.

# üì• Step 1: Load the data

Here, we'll use the `VIMuRe` package to model social networks from a village in Karnataka, India, gathered as part of a project studying the adoption of microfinance [@banerjee_diffusion_2013]. The data files we use here are derived from those openly-available on the Harvard Dataverse page [@banerjee_diffusion_2013-1]. See üíª [Tutorial 1](/latest/tutorials/R/tutorial01-data-preparation.qmd) for more details on how to prepare data for `VIMuRe`.

We have selected a particular village to focus on. The dataset contains information on multiple different types of relationships. We are interested in relationships that were "double-sampled" in the original survey, meaning those elicited through two different prompts. For example, respondents were asked both _"If you needed to borrow kerosene or rice, to whom would you go?"_ as well as _"Who would come to you if he/she needed to borrow kerosene or rice?"_ These two different prompts should give us different perspectives on what could be the same relationship (i.e., we're asking $ego$ if they **go** to $alter$ for help, and also asking $alter$ if $ego$ **comes** to them for help). 

Four different tie types (or "layers") were double-sampled in this way (i.e., elicited with two prompts). Here, we will focus just on one tie type: the "visiting" relationship (based on two prompts: _"In your free time, whose house do you visit?" and "Who visits your house in his or her free time?"_). 

::: panel-tabset

## Load data.frame

After our preprocessing, the input data takes the form of the dataset given below. 

- `ego`: generally the requester, who is also referred to as $i$ in [@de_bacco_latent_2023] (required ‚úîÔ∏è)
- `alter`: generally the giver, also referred to as $j$ in [@de_bacco_latent_2023] (required ‚úîÔ∏è)
- `reporter`: the person reporting on the tie, as referred to as $m$ in [@de_bacco_latent_2023] (required ‚úîÔ∏è)
- `prompt_type`: the prompt type that was given (optional)
- `layer`: the tie type (optional)
- `weight`: the weight of the edge (optional)

Suppose we have a data frame `edgelist` of our village's data that looks like this:


```r
set.seed(100) # for reproducibility

edgelist %>% dplyr::sample_n(size = 10, replace = FALSE)
```

|    ego|  alter| reporter|tie_type    |layer | weight|
|------:|------:|--------:|:-----------|:-----|------:|
| 116702| 116402|   116402|borrowmoney |money |      1|
| 107308| 106302|   107308|lendmoney   |money |      1|
| 113601| 107901|   107901|borrowmoney |money |      1|
| 116307| 114302|   114302|borrowmoney |money |      1|
| 106204| 109201|   106204|lendmoney   |money |      1|
| 117002| 117102|   117102|borrowmoney |money |      1|
| 113201| 104001|   104001|borrowmoney |money |      1|
| 110601| 102901|   110601|lendmoney   |money |      1|
| 114303| 111502|   114303|lendmoney   |money |      1|
| 110402| 116203|   116203|borrowmoney |money |      1|

: A typical data input for `VIMuRe`

(Ensure that column data types are strings, not numeric.)

## Load `igraph` object

Alternatively, you might have your data as a **directed** `igraph` object. In this case, you must ensure that the `igraph` object has the following attributes:

- `reporter`: the person reporting on the tie, as referred to as $m$ in [@de_bacco_latent_2023] (required ‚úîÔ∏è)
- `prompt_type`: the prompt type that was given (optional)
- `layer`: the tie type (optional)
- `weight`: the weight of the edge (optional)

Note that the `graph_from_data_frame` function assumes that the first two columns in the data frame comprise the edge list (i.e., the $ego$ and $alter$ columns and treat all subsequent columns as edge attributes). 

```r
G <- igraph::graph_from_data_frame(edgelist, directed=TRUE)
```

Suppose our village's data is in the form of an `igraph` object `G`:

```r
summary(G)
```

which gives us the following summary:

```r
IGRAPH e80f388 DNW- 324 625 -- 
+ attr: name (v/c), reporter (e/c), prompt_type (e/c), weight (e/n)
```

:::

::: {.callout-note collapse="false"}

Note that the summaries above implicitly assumes that all nodes are observed and are present in the data frame. If you have nodes that are reporters but do not appear in the `ego` or `alter` columns, they will be ignored by `VIMuRe`.

There are ways to include these nodes in the model, but this is beyond the scope of this tutorial. A future tutorial will cover this topic. Add a comment to our [Discussions page](https://github.com/latentnetworks/vimure/discussions) if you have questions or you'd like to see this tutorial sooner.

:::

# üìä Step 2: Summary statistics

## Number of nodes

::: panel-tabset

## data.frame

```r
unique_nodes <- dplyr::union(df_edges$ego, df_edges$alter) %>% unique()

cat("Number of nodes:", length(unique_nodes), "\n")
cat("Number of edges:", nrow(df_edges), "\n")
```

```text
Number of nodes: 324
Number of edges: 625 
```

## `igraph` object

```r
cat("Number of nodes:", igraph::vcount(G), "\n")
cat("Number of edges:", igraph::ecount(G), "\n")
```

```text
Number of nodes: 324
Number of edges: 625 
```

:::

## Number of reporters

::: panel-tabset

## data.frame

```r
reporters <- df_edges$reporter %>% unique()
cat("Number of reporters: ", length(reporters), "\n")
```

```text
Number of reporters:  191 
```

## `igraph` object

```r
reporters <- igraph::get.edge.attribute(G, "reporter") %>% unique()
cat("Number of reporters: ", length(reporters), "\n")
```

```text
Number of reporters:  191 
```

:::

## Average number of ties per reporter

There are a couple of things to note about this dataset: the maximum number of name generators is four, and reporters can only report on ties that they are a part of (e.g., if a reporter is not a part of a tie, they cannot report on it). Because we are modeling double-sampled questions, each reporter can report a maximum of 8 ties.


::: panel-tabset

## data.frame

Let's create a plot to visualise the distribution of the number of ties per reporter.

```r
# Create a plot_df to store the summary
plot_df <- 
  df_edges %>% 
  group_by(prompt_type, reporter) %>% 
  summarise(n_ties = n(), .groups="keep") %>%
  group_by(n_ties, prompt_type) %>%
  summarise(n_reporters = n(), .groups="keep") %>%
  arrange(n_ties, prompt_type)
```

## `igraph` object

```r
plot_df <- 
  bind_cols(reporter=E(G)$reporter, prompt_type=E(G)$prompt_type) %>%
  group_by(prompt_type, reporter) %>% 
  summarise(n_ties = n(), .groups="keep") %>%
  group_by(n_ties, prompt_type) %>%
  summarise(n_reporters = n(), .groups="keep") %>%
  arrange(n_ties, prompt_type)
```
:::

producing the following table:

::: {style="width:50%"}

|   n_ties | prompt_type   |   n_reporters |
|---------:|:--------------|--------------:|
|        1 | borrowmoney   |            57 |
|        1 | receivemoney  |            66 |
|        2 | borrowmoney   |            92 |
|        2 | receivemoney  |            85 |
|        3 | borrowmoney   |            31 |
|        3 | receivemoney  |            17 |
|        4 | borrowmoney   |             1 |

:::

Or, alternatively as a bar plot:

<details><summary>Click to show plot code</summary>

```r
# Plot the distribution
g <- 
(
  ggplot(plot_df, 
    aes(x = n_ties, y=n_reporters, fill=prompt_type)) +
  geom_col() +

  scale_fill_manual(values = c("borrowmoney" = "#1f77b4", "receivemoney" = "#ff7f0e"),
                    labels = c("borrowmoney" = "Who borrows money from you?", 
                               "receivemoney" = "Did you borrow money from anyone")) +
  coord_flip() +

  # Keep the x-axis (y-axis after coord_flip) in descending order
  scale_x_reverse() +

  theme_bw() +
  theme(legend.position = "bottom") +
  labs(x = "Number of ties per reporter", 
       y = "Number of reporters",
       fill = "Prompt type")
)
g
```

</details>

![](figures/tutorial02_fig01.png){width=50%}


## Union vs. Intersection and the concept of Concordance

Concordance is the proportion of the ties in the network that both reporters report. It measures the extent to which the two reporters agree about the network [@ready_measuring_2021]. It is calculated as follows:


$$
\text{Concordance} = \frac{\text{\# of ties reported by both reporters}}{\text{\# number of unique ties reported}} 
$$


::: panel-tabset

## data.frame

```r
# Take the intersection: keep only records where 
# both reporters report on the same tie in both prompt_types
df_intersection <- 
  df_edges %>% 
  group_by(ego, alter, .drop=FALSE) %>% 
  filter(n() == 2) %>% 
  select(ego, alter) %>%
  distinct()

# Take the union: keep all ties reported 
# irrespective of prompt_type and how many times they were reported
df_union <- df_edges %>% select(ego, alter) %>% distinct()

# Concordance
cat(paste0("Concordance is: ", nrow(df_intersection) / nrow(df_union)))
```

## `igraph` object

```r
# Take the intersection: keep only records where
# both reporters report on the same tie in both prompt_types
which_edges_intersection <- E(G)[count_multiple(G, E(G)) == 2]

G_intersection <- 
  igraph::subgraph.edges(G, which_edges_intersection) %>%
  igraph::simplify()

# Take the union: keep all ties reported
# irrespective of prompt_type and how many times they were reported

G_union <- igraph::simplify(G)

# Concordance
cat(
  paste0(
    "Concordance is: ", 
    igraph::ecount(G_intersection) / igraph::ecount(G_union)
  )
)
```


:::

producing:

```text
Concordance is: 0.016260162601626018
```

